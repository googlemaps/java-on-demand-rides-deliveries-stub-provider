/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/fleetengine/v1/vehicles.proto

package google.maps.fleetengine.v1;

/**
 * <pre>
 * The license plate information of the Vehicle.  This is used to support
 * congestion pricing restrictions in certain areas.  To avoid storing
 * personally-identifiable information, only the minimum information
 * about the license plate is stored as part of the entity.
 * </pre>
 *
 * Protobuf type {@code maps.fleetengine.v1.LicensePlate}
 */
public final class LicensePlate extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:maps.fleetengine.v1.LicensePlate)
    LicensePlateOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LicensePlate.newBuilder() to construct.
  private LicensePlate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LicensePlate() {
    countryCode_ = "";
    lastCharacter_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new LicensePlate();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LicensePlate(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            String s = input.readStringRequireUtf8();

            countryCode_ = s;
            break;
          }
          case 18: {
            String s = input.readStringRequireUtf8();

            lastCharacter_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Vehicles.internal_static_maps_fleetengine_v1_LicensePlate_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Vehicles.internal_static_maps_fleetengine_v1_LicensePlate_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            LicensePlate.class, Builder.class);
  }

  public static final int COUNTRY_CODE_FIELD_NUMBER = 1;
  private volatile Object countryCode_;
  /**
   * <pre>
   * Required. CLDR Country/Region Code.  For example, "US" for United States,
   * or "IN" for India.
   * </pre>
   *
   * <code>string country_code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The countryCode.
   */
  @Override
  public String getCountryCode() {
    Object ref = countryCode_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      countryCode_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. CLDR Country/Region Code.  For example, "US" for United States,
   * or "IN" for India.
   * </pre>
   *
   * <code>string country_code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The bytes for countryCode.
   */
  @Override
  public com.google.protobuf.ByteString
      getCountryCodeBytes() {
    Object ref = countryCode_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      countryCode_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LAST_CHARACTER_FIELD_NUMBER = 2;
  private volatile Object lastCharacter_;
  /**
   * <pre>
   * The last digit of the license plate or "-1" to denote no numeric value
   * present in the license plate.
   * * "ABC 1234" -&gt; "4"
   * * "AB 123 CD" -&gt; "3"
   * * "ABCDEF" -&gt; "-1"
   * </pre>
   *
   * <code>string last_character = 2;</code>
   * @return The lastCharacter.
   */
  @Override
  public String getLastCharacter() {
    Object ref = lastCharacter_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      lastCharacter_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The last digit of the license plate or "-1" to denote no numeric value
   * present in the license plate.
   * * "ABC 1234" -&gt; "4"
   * * "AB 123 CD" -&gt; "3"
   * * "ABCDEF" -&gt; "-1"
   * </pre>
   *
   * <code>string last_character = 2;</code>
   * @return The bytes for lastCharacter.
   */
  @Override
  public com.google.protobuf.ByteString
      getLastCharacterBytes() {
    Object ref = lastCharacter_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      lastCharacter_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(countryCode_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, countryCode_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(lastCharacter_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, lastCharacter_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(countryCode_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, countryCode_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(lastCharacter_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, lastCharacter_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof LicensePlate)) {
      return super.equals(obj);
    }
    LicensePlate other = (LicensePlate) obj;

    if (!getCountryCode()
        .equals(other.getCountryCode())) return false;
    if (!getLastCharacter()
        .equals(other.getLastCharacter())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + COUNTRY_CODE_FIELD_NUMBER;
    hash = (53 * hash) + getCountryCode().hashCode();
    hash = (37 * hash) + LAST_CHARACTER_FIELD_NUMBER;
    hash = (53 * hash) + getLastCharacter().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static LicensePlate parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static LicensePlate parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static LicensePlate parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static LicensePlate parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static LicensePlate parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static LicensePlate parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static LicensePlate parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static LicensePlate parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static LicensePlate parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static LicensePlate parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static LicensePlate parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static LicensePlate parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(LicensePlate prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The license plate information of the Vehicle.  This is used to support
   * congestion pricing restrictions in certain areas.  To avoid storing
   * personally-identifiable information, only the minimum information
   * about the license plate is stored as part of the entity.
   * </pre>
   *
   * Protobuf type {@code maps.fleetengine.v1.LicensePlate}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:maps.fleetengine.v1.LicensePlate)
      LicensePlateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Vehicles.internal_static_maps_fleetengine_v1_LicensePlate_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Vehicles.internal_static_maps_fleetengine_v1_LicensePlate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              LicensePlate.class, Builder.class);
    }

    // Construct using google.maps.fleetengine.v1.LicensePlate.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      countryCode_ = "";

      lastCharacter_ = "";

      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Vehicles.internal_static_maps_fleetengine_v1_LicensePlate_descriptor;
    }

    @Override
    public LicensePlate getDefaultInstanceForType() {
      return LicensePlate.getDefaultInstance();
    }

    @Override
    public LicensePlate build() {
      LicensePlate result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public LicensePlate buildPartial() {
      LicensePlate result = new LicensePlate(this);
      result.countryCode_ = countryCode_;
      result.lastCharacter_ = lastCharacter_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof LicensePlate) {
        return mergeFrom((LicensePlate)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(LicensePlate other) {
      if (other == LicensePlate.getDefaultInstance()) return this;
      if (!other.getCountryCode().isEmpty()) {
        countryCode_ = other.countryCode_;
        onChanged();
      }
      if (!other.getLastCharacter().isEmpty()) {
        lastCharacter_ = other.lastCharacter_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      LicensePlate parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (LicensePlate) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private Object countryCode_ = "";
    /**
     * <pre>
     * Required. CLDR Country/Region Code.  For example, "US" for United States,
     * or "IN" for India.
     * </pre>
     *
     * <code>string country_code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The countryCode.
     */
    public String getCountryCode() {
      Object ref = countryCode_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        countryCode_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * Required. CLDR Country/Region Code.  For example, "US" for United States,
     * or "IN" for India.
     * </pre>
     *
     * <code>string country_code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The bytes for countryCode.
     */
    public com.google.protobuf.ByteString
        getCountryCodeBytes() {
      Object ref = countryCode_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        countryCode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. CLDR Country/Region Code.  For example, "US" for United States,
     * or "IN" for India.
     * </pre>
     *
     * <code>string country_code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The countryCode to set.
     * @return This builder for chaining.
     */
    public Builder setCountryCode(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      countryCode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. CLDR Country/Region Code.  For example, "US" for United States,
     * or "IN" for India.
     * </pre>
     *
     * <code>string country_code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearCountryCode() {
      
      countryCode_ = getDefaultInstance().getCountryCode();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. CLDR Country/Region Code.  For example, "US" for United States,
     * or "IN" for India.
     * </pre>
     *
     * <code>string country_code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The bytes for countryCode to set.
     * @return This builder for chaining.
     */
    public Builder setCountryCodeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      countryCode_ = value;
      onChanged();
      return this;
    }

    private Object lastCharacter_ = "";
    /**
     * <pre>
     * The last digit of the license plate or "-1" to denote no numeric value
     * present in the license plate.
     * * "ABC 1234" -&gt; "4"
     * * "AB 123 CD" -&gt; "3"
     * * "ABCDEF" -&gt; "-1"
     * </pre>
     *
     * <code>string last_character = 2;</code>
     * @return The lastCharacter.
     */
    public String getLastCharacter() {
      Object ref = lastCharacter_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        lastCharacter_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * The last digit of the license plate or "-1" to denote no numeric value
     * present in the license plate.
     * * "ABC 1234" -&gt; "4"
     * * "AB 123 CD" -&gt; "3"
     * * "ABCDEF" -&gt; "-1"
     * </pre>
     *
     * <code>string last_character = 2;</code>
     * @return The bytes for lastCharacter.
     */
    public com.google.protobuf.ByteString
        getLastCharacterBytes() {
      Object ref = lastCharacter_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        lastCharacter_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The last digit of the license plate or "-1" to denote no numeric value
     * present in the license plate.
     * * "ABC 1234" -&gt; "4"
     * * "AB 123 CD" -&gt; "3"
     * * "ABCDEF" -&gt; "-1"
     * </pre>
     *
     * <code>string last_character = 2;</code>
     * @param value The lastCharacter to set.
     * @return This builder for chaining.
     */
    public Builder setLastCharacter(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      lastCharacter_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The last digit of the license plate or "-1" to denote no numeric value
     * present in the license plate.
     * * "ABC 1234" -&gt; "4"
     * * "AB 123 CD" -&gt; "3"
     * * "ABCDEF" -&gt; "-1"
     * </pre>
     *
     * <code>string last_character = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearLastCharacter() {
      
      lastCharacter_ = getDefaultInstance().getLastCharacter();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The last digit of the license plate or "-1" to denote no numeric value
     * present in the license plate.
     * * "ABC 1234" -&gt; "4"
     * * "AB 123 CD" -&gt; "3"
     * * "ABCDEF" -&gt; "-1"
     * </pre>
     *
     * <code>string last_character = 2;</code>
     * @param value The bytes for lastCharacter to set.
     * @return This builder for chaining.
     */
    public Builder setLastCharacterBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      lastCharacter_ = value;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:maps.fleetengine.v1.LicensePlate)
  }

  // @@protoc_insertion_point(class_scope:maps.fleetengine.v1.LicensePlate)
  private static final LicensePlate DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new LicensePlate();
  }

  public static LicensePlate getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LicensePlate>
      PARSER = new com.google.protobuf.AbstractParser<LicensePlate>() {
    @Override
    public LicensePlate parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LicensePlate(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LicensePlate> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<LicensePlate> getParserForType() {
    return PARSER;
  }

  @Override
  public LicensePlate getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

