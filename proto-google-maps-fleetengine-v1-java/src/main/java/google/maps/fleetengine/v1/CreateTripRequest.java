/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/fleetengine/v1/trip_api.proto

package google.maps.fleetengine.v1;

/**
 * <pre>
 * CreateTrip request message.
 * </pre>
 *
 * Protobuf type {@code maps.fleetengine.v1.CreateTripRequest}
 */
public final class CreateTripRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:maps.fleetengine.v1.CreateTripRequest)
    CreateTripRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CreateTripRequest.newBuilder() to construct.
  private CreateTripRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CreateTripRequest() {
    parent_ = "";
    tripId_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new CreateTripRequest();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CreateTripRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            RequestHeader.Builder subBuilder = null;
            if (header_ != null) {
              subBuilder = header_.toBuilder();
            }
            header_ = input.readMessage(RequestHeader.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(header_);
              header_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            String s = input.readStringRequireUtf8();

            parent_ = s;
            break;
          }
          case 34: {
            Trip.Builder subBuilder = null;
            if (trip_ != null) {
              subBuilder = trip_.toBuilder();
            }
            trip_ = input.readMessage(Trip.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(trip_);
              trip_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            String s = input.readStringRequireUtf8();

            tripId_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return TripApi.internal_static_maps_fleetengine_v1_CreateTripRequest_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return TripApi.internal_static_maps_fleetengine_v1_CreateTripRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            CreateTripRequest.class, Builder.class);
  }

  public static final int HEADER_FIELD_NUMBER = 1;
  private RequestHeader header_;
  /**
   * <pre>
   * The standard Fleet Engine request header.
   * </pre>
   *
   * <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
   * @return Whether the header field is set.
   */
  @Override
  public boolean hasHeader() {
    return header_ != null;
  }
  /**
   * <pre>
   * The standard Fleet Engine request header.
   * </pre>
   *
   * <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
   * @return The header.
   */
  @Override
  public RequestHeader getHeader() {
    return header_ == null ? RequestHeader.getDefaultInstance() : header_;
  }
  /**
   * <pre>
   * The standard Fleet Engine request header.
   * </pre>
   *
   * <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
   */
  @Override
  public RequestHeaderOrBuilder getHeaderOrBuilder() {
    return getHeader();
  }

  public static final int PARENT_FIELD_NUMBER = 3;
  private volatile Object parent_;
  /**
   * <pre>
   * Required. Must be in the format "providers/{provider}".
   * The provider must be the Project ID (for example, sample-cloud-project)
   * of the Google Cloud Project of which the service account making
   * this call is a member.
   * </pre>
   *
   * <code>string parent = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
   * @return The parent.
   */
  @Override
  public String getParent() {
    Object ref = parent_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      parent_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. Must be in the format "providers/{provider}".
   * The provider must be the Project ID (for example, sample-cloud-project)
   * of the Google Cloud Project of which the service account making
   * this call is a member.
   * </pre>
   *
   * <code>string parent = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
   * @return The bytes for parent.
   */
  @Override
  public com.google.protobuf.ByteString
      getParentBytes() {
    Object ref = parent_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      parent_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TRIP_ID_FIELD_NUMBER = 5;
  private volatile Object tripId_;
  /**
   * <pre>
   * Required. Unique Trip ID; must be unique per provider.  The actual
   * format and value is opaque to the Fleet Engine and is determined
   * by the provider.
   * </pre>
   *
   * <code>string trip_id = 5 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The tripId.
   */
  @Override
  public String getTripId() {
    Object ref = tripId_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      tripId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. Unique Trip ID; must be unique per provider.  The actual
   * format and value is opaque to the Fleet Engine and is determined
   * by the provider.
   * </pre>
   *
   * <code>string trip_id = 5 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The bytes for tripId.
   */
  @Override
  public com.google.protobuf.ByteString
      getTripIdBytes() {
    Object ref = tripId_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      tripId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TRIP_FIELD_NUMBER = 4;
  private Trip trip_;
  /**
   * <pre>
   * Required. Trip entity to create.
   * When creating a Trip, the following fields are required:
   * * trip_type
   * * pickup_point
   * The following fields are used if you provide them:
   * * number_of_passengers
   * * vehicle_id
   * * dropoff_point
   * * intermediate_destinations
   * Only EXCLUSIVE trips support multiple destinations.
   * When vehicle_id is set for a shared trip, you must supply
   * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
   * waypoints for the vehicle, otherwise the waypoint order will be
   * undetermined.
   * When you specify `Trip.vehicle_waypoints`, the list must contain all
   * the remaining waypoints of the vehicle's trips, with no extra waypoints.
   * You must order these waypoints such that for a given trip, the pickup
   * point is before intermediate destinations, and all intermediate
   * destinations come before the drop-off point. An `EXCLUSIVE` trip's
   * waypoints must not interleave with any other trips.
   * The `trip_id`, `waypoint_type` and `location` fields are used, and all
   * other TripWaypoint fields in vehicle_waypoints are ignored.
   * All other Trip fields are ignored.
   * </pre>
   *
   * <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the trip field is set.
   */
  @Override
  public boolean hasTrip() {
    return trip_ != null;
  }
  /**
   * <pre>
   * Required. Trip entity to create.
   * When creating a Trip, the following fields are required:
   * * trip_type
   * * pickup_point
   * The following fields are used if you provide them:
   * * number_of_passengers
   * * vehicle_id
   * * dropoff_point
   * * intermediate_destinations
   * Only EXCLUSIVE trips support multiple destinations.
   * When vehicle_id is set for a shared trip, you must supply
   * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
   * waypoints for the vehicle, otherwise the waypoint order will be
   * undetermined.
   * When you specify `Trip.vehicle_waypoints`, the list must contain all
   * the remaining waypoints of the vehicle's trips, with no extra waypoints.
   * You must order these waypoints such that for a given trip, the pickup
   * point is before intermediate destinations, and all intermediate
   * destinations come before the drop-off point. An `EXCLUSIVE` trip's
   * waypoints must not interleave with any other trips.
   * The `trip_id`, `waypoint_type` and `location` fields are used, and all
   * other TripWaypoint fields in vehicle_waypoints are ignored.
   * All other Trip fields are ignored.
   * </pre>
   *
   * <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The trip.
   */
  @Override
  public Trip getTrip() {
    return trip_ == null ? Trip.getDefaultInstance() : trip_;
  }
  /**
   * <pre>
   * Required. Trip entity to create.
   * When creating a Trip, the following fields are required:
   * * trip_type
   * * pickup_point
   * The following fields are used if you provide them:
   * * number_of_passengers
   * * vehicle_id
   * * dropoff_point
   * * intermediate_destinations
   * Only EXCLUSIVE trips support multiple destinations.
   * When vehicle_id is set for a shared trip, you must supply
   * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
   * waypoints for the vehicle, otherwise the waypoint order will be
   * undetermined.
   * When you specify `Trip.vehicle_waypoints`, the list must contain all
   * the remaining waypoints of the vehicle's trips, with no extra waypoints.
   * You must order these waypoints such that for a given trip, the pickup
   * point is before intermediate destinations, and all intermediate
   * destinations come before the drop-off point. An `EXCLUSIVE` trip's
   * waypoints must not interleave with any other trips.
   * The `trip_id`, `waypoint_type` and `location` fields are used, and all
   * other TripWaypoint fields in vehicle_waypoints are ignored.
   * All other Trip fields are ignored.
   * </pre>
   *
   * <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @Override
  public TripOrBuilder getTripOrBuilder() {
    return getTrip();
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (header_ != null) {
      output.writeMessage(1, getHeader());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(parent_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, parent_);
    }
    if (trip_ != null) {
      output.writeMessage(4, getTrip());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tripId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, tripId_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (header_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getHeader());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(parent_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, parent_);
    }
    if (trip_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getTrip());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tripId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, tripId_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof CreateTripRequest)) {
      return super.equals(obj);
    }
    CreateTripRequest other = (CreateTripRequest) obj;

    if (hasHeader() != other.hasHeader()) return false;
    if (hasHeader()) {
      if (!getHeader()
          .equals(other.getHeader())) return false;
    }
    if (!getParent()
        .equals(other.getParent())) return false;
    if (!getTripId()
        .equals(other.getTripId())) return false;
    if (hasTrip() != other.hasTrip()) return false;
    if (hasTrip()) {
      if (!getTrip()
          .equals(other.getTrip())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasHeader()) {
      hash = (37 * hash) + HEADER_FIELD_NUMBER;
      hash = (53 * hash) + getHeader().hashCode();
    }
    hash = (37 * hash) + PARENT_FIELD_NUMBER;
    hash = (53 * hash) + getParent().hashCode();
    hash = (37 * hash) + TRIP_ID_FIELD_NUMBER;
    hash = (53 * hash) + getTripId().hashCode();
    if (hasTrip()) {
      hash = (37 * hash) + TRIP_FIELD_NUMBER;
      hash = (53 * hash) + getTrip().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static CreateTripRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static CreateTripRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static CreateTripRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static CreateTripRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static CreateTripRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static CreateTripRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static CreateTripRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static CreateTripRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static CreateTripRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static CreateTripRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static CreateTripRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static CreateTripRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(CreateTripRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * CreateTrip request message.
   * </pre>
   *
   * Protobuf type {@code maps.fleetengine.v1.CreateTripRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:maps.fleetengine.v1.CreateTripRequest)
      CreateTripRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TripApi.internal_static_maps_fleetengine_v1_CreateTripRequest_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TripApi.internal_static_maps_fleetengine_v1_CreateTripRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              CreateTripRequest.class, Builder.class);
    }

    // Construct using google.maps.fleetengine.v1.CreateTripRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      if (headerBuilder_ == null) {
        header_ = null;
      } else {
        header_ = null;
        headerBuilder_ = null;
      }
      parent_ = "";

      tripId_ = "";

      if (tripBuilder_ == null) {
        trip_ = null;
      } else {
        trip_ = null;
        tripBuilder_ = null;
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return TripApi.internal_static_maps_fleetengine_v1_CreateTripRequest_descriptor;
    }

    @Override
    public CreateTripRequest getDefaultInstanceForType() {
      return CreateTripRequest.getDefaultInstance();
    }

    @Override
    public CreateTripRequest build() {
      CreateTripRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public CreateTripRequest buildPartial() {
      CreateTripRequest result = new CreateTripRequest(this);
      if (headerBuilder_ == null) {
        result.header_ = header_;
      } else {
        result.header_ = headerBuilder_.build();
      }
      result.parent_ = parent_;
      result.tripId_ = tripId_;
      if (tripBuilder_ == null) {
        result.trip_ = trip_;
      } else {
        result.trip_ = tripBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof CreateTripRequest) {
        return mergeFrom((CreateTripRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(CreateTripRequest other) {
      if (other == CreateTripRequest.getDefaultInstance()) return this;
      if (other.hasHeader()) {
        mergeHeader(other.getHeader());
      }
      if (!other.getParent().isEmpty()) {
        parent_ = other.parent_;
        onChanged();
      }
      if (!other.getTripId().isEmpty()) {
        tripId_ = other.tripId_;
        onChanged();
      }
      if (other.hasTrip()) {
        mergeTrip(other.getTrip());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      CreateTripRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (CreateTripRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private RequestHeader header_;
    private com.google.protobuf.SingleFieldBuilderV3<
        RequestHeader, RequestHeader.Builder, RequestHeaderOrBuilder> headerBuilder_;
    /**
     * <pre>
     * The standard Fleet Engine request header.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
     * @return Whether the header field is set.
     */
    public boolean hasHeader() {
      return headerBuilder_ != null || header_ != null;
    }
    /**
     * <pre>
     * The standard Fleet Engine request header.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
     * @return The header.
     */
    public RequestHeader getHeader() {
      if (headerBuilder_ == null) {
        return header_ == null ? RequestHeader.getDefaultInstance() : header_;
      } else {
        return headerBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The standard Fleet Engine request header.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
     */
    public Builder setHeader(RequestHeader value) {
      if (headerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        header_ = value;
        onChanged();
      } else {
        headerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The standard Fleet Engine request header.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
     */
    public Builder setHeader(
        RequestHeader.Builder builderForValue) {
      if (headerBuilder_ == null) {
        header_ = builderForValue.build();
        onChanged();
      } else {
        headerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The standard Fleet Engine request header.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
     */
    public Builder mergeHeader(RequestHeader value) {
      if (headerBuilder_ == null) {
        if (header_ != null) {
          header_ =
            RequestHeader.newBuilder(header_).mergeFrom(value).buildPartial();
        } else {
          header_ = value;
        }
        onChanged();
      } else {
        headerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The standard Fleet Engine request header.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
     */
    public Builder clearHeader() {
      if (headerBuilder_ == null) {
        header_ = null;
        onChanged();
      } else {
        header_ = null;
        headerBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The standard Fleet Engine request header.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
     */
    public RequestHeader.Builder getHeaderBuilder() {
      
      onChanged();
      return getHeaderFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The standard Fleet Engine request header.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
     */
    public RequestHeaderOrBuilder getHeaderOrBuilder() {
      if (headerBuilder_ != null) {
        return headerBuilder_.getMessageOrBuilder();
      } else {
        return header_ == null ?
            RequestHeader.getDefaultInstance() : header_;
      }
    }
    /**
     * <pre>
     * The standard Fleet Engine request header.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.RequestHeader header = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        RequestHeader, RequestHeader.Builder, RequestHeaderOrBuilder>
        getHeaderFieldBuilder() {
      if (headerBuilder_ == null) {
        headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            RequestHeader, RequestHeader.Builder, RequestHeaderOrBuilder>(
                getHeader(),
                getParentForChildren(),
                isClean());
        header_ = null;
      }
      return headerBuilder_;
    }

    private Object parent_ = "";
    /**
     * <pre>
     * Required. Must be in the format "providers/{provider}".
     * The provider must be the Project ID (for example, sample-cloud-project)
     * of the Google Cloud Project of which the service account making
     * this call is a member.
     * </pre>
     *
     * <code>string parent = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @return The parent.
     */
    public String getParent() {
      Object ref = parent_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        parent_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * Required. Must be in the format "providers/{provider}".
     * The provider must be the Project ID (for example, sample-cloud-project)
     * of the Google Cloud Project of which the service account making
     * this call is a member.
     * </pre>
     *
     * <code>string parent = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @return The bytes for parent.
     */
    public com.google.protobuf.ByteString
        getParentBytes() {
      Object ref = parent_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        parent_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. Must be in the format "providers/{provider}".
     * The provider must be the Project ID (for example, sample-cloud-project)
     * of the Google Cloud Project of which the service account making
     * this call is a member.
     * </pre>
     *
     * <code>string parent = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @param value The parent to set.
     * @return This builder for chaining.
     */
    public Builder setParent(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      parent_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. Must be in the format "providers/{provider}".
     * The provider must be the Project ID (for example, sample-cloud-project)
     * of the Google Cloud Project of which the service account making
     * this call is a member.
     * </pre>
     *
     * <code>string parent = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearParent() {
      
      parent_ = getDefaultInstance().getParent();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. Must be in the format "providers/{provider}".
     * The provider must be the Project ID (for example, sample-cloud-project)
     * of the Google Cloud Project of which the service account making
     * this call is a member.
     * </pre>
     *
     * <code>string parent = 3 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @param value The bytes for parent to set.
     * @return This builder for chaining.
     */
    public Builder setParentBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      parent_ = value;
      onChanged();
      return this;
    }

    private Object tripId_ = "";
    /**
     * <pre>
     * Required. Unique Trip ID; must be unique per provider.  The actual
     * format and value is opaque to the Fleet Engine and is determined
     * by the provider.
     * </pre>
     *
     * <code>string trip_id = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The tripId.
     */
    public String getTripId() {
      Object ref = tripId_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        tripId_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * Required. Unique Trip ID; must be unique per provider.  The actual
     * format and value is opaque to the Fleet Engine and is determined
     * by the provider.
     * </pre>
     *
     * <code>string trip_id = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The bytes for tripId.
     */
    public com.google.protobuf.ByteString
        getTripIdBytes() {
      Object ref = tripId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        tripId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. Unique Trip ID; must be unique per provider.  The actual
     * format and value is opaque to the Fleet Engine and is determined
     * by the provider.
     * </pre>
     *
     * <code>string trip_id = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The tripId to set.
     * @return This builder for chaining.
     */
    public Builder setTripId(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      tripId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. Unique Trip ID; must be unique per provider.  The actual
     * format and value is opaque to the Fleet Engine and is determined
     * by the provider.
     * </pre>
     *
     * <code>string trip_id = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearTripId() {
      
      tripId_ = getDefaultInstance().getTripId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. Unique Trip ID; must be unique per provider.  The actual
     * format and value is opaque to the Fleet Engine and is determined
     * by the provider.
     * </pre>
     *
     * <code>string trip_id = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The bytes for tripId to set.
     * @return This builder for chaining.
     */
    public Builder setTripIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      tripId_ = value;
      onChanged();
      return this;
    }

    private Trip trip_;
    private com.google.protobuf.SingleFieldBuilderV3<
        Trip, Trip.Builder, TripOrBuilder> tripBuilder_;
    /**
     * <pre>
     * Required. Trip entity to create.
     * When creating a Trip, the following fields are required:
     * * trip_type
     * * pickup_point
     * The following fields are used if you provide them:
     * * number_of_passengers
     * * vehicle_id
     * * dropoff_point
     * * intermediate_destinations
     * Only EXCLUSIVE trips support multiple destinations.
     * When vehicle_id is set for a shared trip, you must supply
     * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     * waypoints for the vehicle, otherwise the waypoint order will be
     * undetermined.
     * When you specify `Trip.vehicle_waypoints`, the list must contain all
     * the remaining waypoints of the vehicle's trips, with no extra waypoints.
     * You must order these waypoints such that for a given trip, the pickup
     * point is before intermediate destinations, and all intermediate
     * destinations come before the drop-off point. An `EXCLUSIVE` trip's
     * waypoints must not interleave with any other trips.
     * The `trip_id`, `waypoint_type` and `location` fields are used, and all
     * other TripWaypoint fields in vehicle_waypoints are ignored.
     * All other Trip fields are ignored.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return Whether the trip field is set.
     */
    public boolean hasTrip() {
      return tripBuilder_ != null || trip_ != null;
    }
    /**
     * <pre>
     * Required. Trip entity to create.
     * When creating a Trip, the following fields are required:
     * * trip_type
     * * pickup_point
     * The following fields are used if you provide them:
     * * number_of_passengers
     * * vehicle_id
     * * dropoff_point
     * * intermediate_destinations
     * Only EXCLUSIVE trips support multiple destinations.
     * When vehicle_id is set for a shared trip, you must supply
     * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     * waypoints for the vehicle, otherwise the waypoint order will be
     * undetermined.
     * When you specify `Trip.vehicle_waypoints`, the list must contain all
     * the remaining waypoints of the vehicle's trips, with no extra waypoints.
     * You must order these waypoints such that for a given trip, the pickup
     * point is before intermediate destinations, and all intermediate
     * destinations come before the drop-off point. An `EXCLUSIVE` trip's
     * waypoints must not interleave with any other trips.
     * The `trip_id`, `waypoint_type` and `location` fields are used, and all
     * other TripWaypoint fields in vehicle_waypoints are ignored.
     * All other Trip fields are ignored.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The trip.
     */
    public Trip getTrip() {
      if (tripBuilder_ == null) {
        return trip_ == null ? Trip.getDefaultInstance() : trip_;
      } else {
        return tripBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Required. Trip entity to create.
     * When creating a Trip, the following fields are required:
     * * trip_type
     * * pickup_point
     * The following fields are used if you provide them:
     * * number_of_passengers
     * * vehicle_id
     * * dropoff_point
     * * intermediate_destinations
     * Only EXCLUSIVE trips support multiple destinations.
     * When vehicle_id is set for a shared trip, you must supply
     * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     * waypoints for the vehicle, otherwise the waypoint order will be
     * undetermined.
     * When you specify `Trip.vehicle_waypoints`, the list must contain all
     * the remaining waypoints of the vehicle's trips, with no extra waypoints.
     * You must order these waypoints such that for a given trip, the pickup
     * point is before intermediate destinations, and all intermediate
     * destinations come before the drop-off point. An `EXCLUSIVE` trip's
     * waypoints must not interleave with any other trips.
     * The `trip_id`, `waypoint_type` and `location` fields are used, and all
     * other TripWaypoint fields in vehicle_waypoints are ignored.
     * All other Trip fields are ignored.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setTrip(Trip value) {
      if (tripBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        trip_ = value;
        onChanged();
      } else {
        tripBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Required. Trip entity to create.
     * When creating a Trip, the following fields are required:
     * * trip_type
     * * pickup_point
     * The following fields are used if you provide them:
     * * number_of_passengers
     * * vehicle_id
     * * dropoff_point
     * * intermediate_destinations
     * Only EXCLUSIVE trips support multiple destinations.
     * When vehicle_id is set for a shared trip, you must supply
     * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     * waypoints for the vehicle, otherwise the waypoint order will be
     * undetermined.
     * When you specify `Trip.vehicle_waypoints`, the list must contain all
     * the remaining waypoints of the vehicle's trips, with no extra waypoints.
     * You must order these waypoints such that for a given trip, the pickup
     * point is before intermediate destinations, and all intermediate
     * destinations come before the drop-off point. An `EXCLUSIVE` trip's
     * waypoints must not interleave with any other trips.
     * The `trip_id`, `waypoint_type` and `location` fields are used, and all
     * other TripWaypoint fields in vehicle_waypoints are ignored.
     * All other Trip fields are ignored.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setTrip(
        Trip.Builder builderForValue) {
      if (tripBuilder_ == null) {
        trip_ = builderForValue.build();
        onChanged();
      } else {
        tripBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Required. Trip entity to create.
     * When creating a Trip, the following fields are required:
     * * trip_type
     * * pickup_point
     * The following fields are used if you provide them:
     * * number_of_passengers
     * * vehicle_id
     * * dropoff_point
     * * intermediate_destinations
     * Only EXCLUSIVE trips support multiple destinations.
     * When vehicle_id is set for a shared trip, you must supply
     * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     * waypoints for the vehicle, otherwise the waypoint order will be
     * undetermined.
     * When you specify `Trip.vehicle_waypoints`, the list must contain all
     * the remaining waypoints of the vehicle's trips, with no extra waypoints.
     * You must order these waypoints such that for a given trip, the pickup
     * point is before intermediate destinations, and all intermediate
     * destinations come before the drop-off point. An `EXCLUSIVE` trip's
     * waypoints must not interleave with any other trips.
     * The `trip_id`, `waypoint_type` and `location` fields are used, and all
     * other TripWaypoint fields in vehicle_waypoints are ignored.
     * All other Trip fields are ignored.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergeTrip(Trip value) {
      if (tripBuilder_ == null) {
        if (trip_ != null) {
          trip_ =
            Trip.newBuilder(trip_).mergeFrom(value).buildPartial();
        } else {
          trip_ = value;
        }
        onChanged();
      } else {
        tripBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Required. Trip entity to create.
     * When creating a Trip, the following fields are required:
     * * trip_type
     * * pickup_point
     * The following fields are used if you provide them:
     * * number_of_passengers
     * * vehicle_id
     * * dropoff_point
     * * intermediate_destinations
     * Only EXCLUSIVE trips support multiple destinations.
     * When vehicle_id is set for a shared trip, you must supply
     * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     * waypoints for the vehicle, otherwise the waypoint order will be
     * undetermined.
     * When you specify `Trip.vehicle_waypoints`, the list must contain all
     * the remaining waypoints of the vehicle's trips, with no extra waypoints.
     * You must order these waypoints such that for a given trip, the pickup
     * point is before intermediate destinations, and all intermediate
     * destinations come before the drop-off point. An `EXCLUSIVE` trip's
     * waypoints must not interleave with any other trips.
     * The `trip_id`, `waypoint_type` and `location` fields are used, and all
     * other TripWaypoint fields in vehicle_waypoints are ignored.
     * All other Trip fields are ignored.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearTrip() {
      if (tripBuilder_ == null) {
        trip_ = null;
        onChanged();
      } else {
        trip_ = null;
        tripBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Required. Trip entity to create.
     * When creating a Trip, the following fields are required:
     * * trip_type
     * * pickup_point
     * The following fields are used if you provide them:
     * * number_of_passengers
     * * vehicle_id
     * * dropoff_point
     * * intermediate_destinations
     * Only EXCLUSIVE trips support multiple destinations.
     * When vehicle_id is set for a shared trip, you must supply
     * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     * waypoints for the vehicle, otherwise the waypoint order will be
     * undetermined.
     * When you specify `Trip.vehicle_waypoints`, the list must contain all
     * the remaining waypoints of the vehicle's trips, with no extra waypoints.
     * You must order these waypoints such that for a given trip, the pickup
     * point is before intermediate destinations, and all intermediate
     * destinations come before the drop-off point. An `EXCLUSIVE` trip's
     * waypoints must not interleave with any other trips.
     * The `trip_id`, `waypoint_type` and `location` fields are used, and all
     * other TripWaypoint fields in vehicle_waypoints are ignored.
     * All other Trip fields are ignored.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Trip.Builder getTripBuilder() {
      
      onChanged();
      return getTripFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Required. Trip entity to create.
     * When creating a Trip, the following fields are required:
     * * trip_type
     * * pickup_point
     * The following fields are used if you provide them:
     * * number_of_passengers
     * * vehicle_id
     * * dropoff_point
     * * intermediate_destinations
     * Only EXCLUSIVE trips support multiple destinations.
     * When vehicle_id is set for a shared trip, you must supply
     * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     * waypoints for the vehicle, otherwise the waypoint order will be
     * undetermined.
     * When you specify `Trip.vehicle_waypoints`, the list must contain all
     * the remaining waypoints of the vehicle's trips, with no extra waypoints.
     * You must order these waypoints such that for a given trip, the pickup
     * point is before intermediate destinations, and all intermediate
     * destinations come before the drop-off point. An `EXCLUSIVE` trip's
     * waypoints must not interleave with any other trips.
     * The `trip_id`, `waypoint_type` and `location` fields are used, and all
     * other TripWaypoint fields in vehicle_waypoints are ignored.
     * All other Trip fields are ignored.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public TripOrBuilder getTripOrBuilder() {
      if (tripBuilder_ != null) {
        return tripBuilder_.getMessageOrBuilder();
      } else {
        return trip_ == null ?
            Trip.getDefaultInstance() : trip_;
      }
    }
    /**
     * <pre>
     * Required. Trip entity to create.
     * When creating a Trip, the following fields are required:
     * * trip_type
     * * pickup_point
     * The following fields are used if you provide them:
     * * number_of_passengers
     * * vehicle_id
     * * dropoff_point
     * * intermediate_destinations
     * Only EXCLUSIVE trips support multiple destinations.
     * When vehicle_id is set for a shared trip, you must supply
     * the list of `Trip.vehicle_waypoints` to specify the order of the remaining
     * waypoints for the vehicle, otherwise the waypoint order will be
     * undetermined.
     * When you specify `Trip.vehicle_waypoints`, the list must contain all
     * the remaining waypoints of the vehicle's trips, with no extra waypoints.
     * You must order these waypoints such that for a given trip, the pickup
     * point is before intermediate destinations, and all intermediate
     * destinations come before the drop-off point. An `EXCLUSIVE` trip's
     * waypoints must not interleave with any other trips.
     * The `trip_id`, `waypoint_type` and `location` fields are used, and all
     * other TripWaypoint fields in vehicle_waypoints are ignored.
     * All other Trip fields are ignored.
     * </pre>
     *
     * <code>.maps.fleetengine.v1.Trip trip = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Trip, Trip.Builder, TripOrBuilder>
        getTripFieldBuilder() {
      if (tripBuilder_ == null) {
        tripBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Trip, Trip.Builder, TripOrBuilder>(
                getTrip(),
                getParentForChildren(),
                isClean());
        trip_ = null;
      }
      return tripBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:maps.fleetengine.v1.CreateTripRequest)
  }

  // @@protoc_insertion_point(class_scope:maps.fleetengine.v1.CreateTripRequest)
  private static final CreateTripRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new CreateTripRequest();
  }

  public static CreateTripRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CreateTripRequest>
      PARSER = new com.google.protobuf.AbstractParser<CreateTripRequest>() {
    @Override
    public CreateTripRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CreateTripRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CreateTripRequest> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<CreateTripRequest> getParserForType() {
    return PARSER;
  }

  @Override
  public CreateTripRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

