/* Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {    // Configuration for building
  repositories {
    google()
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.8.1'
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.4'
  }
}

repositories {   // repositories for Jar's you access in your code
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots' // SNAPSHOT repository (if needed)
  }
  mavenCentral()
}

apply plugin: 'java'                              // standard Java tasks
apply plugin: 'war'                               // standard Web Archive plugin
apply plugin: 'com.google.cloud.tools.appengine'  // App Engine tasks
apply plugin: 'com.google.protobuf'

// Define this to handle any internal references to 'compile' configuration
configurations {
  compile.extendsFrom implementation
}

dependencies {
  compileOnly 'com.google.appengine:appengine-api-1.0-sdk:2.0.26'
  compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
  compileOnly 'jstl:jstl:1.2'

  // Core dependencies
  implementation 'com.google.maps:fleetengine-auth:2.0.0'
  implementation 'com.google.api:gax:2.30.0'
  implementation 'com.google.maps:google-maps-fleetengine:0.1.0'

  // Guice dependencies
  implementation 'com.google.inject:guice:5.1.0'
  implementation 'com.google.inject.extensions:guice-servlet:5.1.0'

  // Other dependencies
  implementation 'com.auth0:java-jwt:3.19.2'
  implementation 'com.google.code.gson:gson:2.10.1'
  implementation 'com.google.auto.value:auto-value-annotations:1.10.1'
  annotationProcessor 'com.google.auto.value:auto-value:1.10.1'
  implementation 'com.google.guava:guava:32.1.2-jre'

  // Explicitly add gRPC dependencies with fixed versions
  implementation 'io.grpc:grpc-api:1.53.0'
  implementation 'io.grpc:grpc-context:1.53.0'
  implementation 'io.grpc:grpc-core:1.53.0'
  implementation 'io.grpc:grpc-protobuf:1.53.0'
  implementation 'io.grpc:grpc-stub:1.53.0'
  implementation 'io.grpc:grpc-netty-shaded:1.53.0'
  implementation 'io.grpc:grpc-auth:1.53.0'

  // Protobuf dependencies
  implementation 'com.google.protobuf:protobuf-java:3.21.7'
  implementation 'com.google.protobuf:protobuf-java-util:3.21.7'

  // Java annotations
  implementation 'javax.annotation:javax.annotation-api:1.3.2'
  implementation 'javax.ws.rs:jsr311-api:1.1.1'

  // Test dependencies
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'com.google.truth:truth:1.1.3'
  testImplementation 'org.mockito:mockito-core:3.12.4'
  testImplementation 'com.google.appengine:appengine-testing:+'
  testImplementation 'com.google.appengine:appengine-api-stubs:+'
  testImplementation 'com.google.appengine:appengine-tools-sdk:+'
}

configurations.all {
  resolutionStrategy {
    // Force gRPC versions to be consistent
    force 'io.grpc:grpc-api:1.53.0'
    force 'io.grpc:grpc-context:1.53.0'
    force 'io.grpc:grpc-core:1.53.0'
    force 'io.grpc:grpc-protobuf:1.53.0'
    force 'io.grpc:grpc-stub:1.53.0'
    force 'io.grpc:grpc-netty-shaded:1.53.0'
    force 'io.grpc:grpc-auth:1.53.0'

    // Force Guice to be consistent
    force 'com.google.inject:guice:5.1.0'
    force 'com.google.inject.extensions:guice-servlet:5.1.0'

    // Force Guava version
    force 'com.google.guava:guava:32.1.2-jre'
  }
}

war {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
  from(configurations.runtimeClasspath) {
    include '**/grpc-context-*.jar'
    include '**/grpc-api-*.jar'
    into 'WEB-INF/lib'
  }
}

// Always run unit tests
appengineDeploy.dependsOn test
appengineStage.dependsOn test

appengine {  // App Engine tasks configuration
  run {
    automaticRestart = true
  }

  deploy {   // deploy configuration
    projectId = 'YOUR-CLOUD-PROJECT'
    version = '1'
  }
}

test {
  useJUnit()
  testLogging.showStandardStreams = true
  beforeTest { descriptor ->
     logger.lifecycle("test: " + descriptor + "  Running")
  }

  onOutput { descriptor, event ->
     logger.lifecycle("test: " + descriptor + ": " + event.message )
  }
  afterTest { descriptor, result ->
    logger.lifecycle("test: " + descriptor + ": " + result )
  }
}

group = "com.example.appenginej17"        // Generated output GroupId
version = "1.0-SNAPSHOT"       // Version in generated output

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}